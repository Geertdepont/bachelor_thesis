---
layout: post
title: "The lifecycle of Presenters should follow the lifecycle of the Views, but not by replicating the complexity of the lifecycles of Android components."
guideline_id: 20
short_description: "Lifecycle of Presenters"
date:   2019-05-21 01:00:22 +0200
categories: mvp
icon: "icon-retweet"
doc: "By having callbacks related to the Activity lifecycle in Presenters, Presenters
      become tightly coupled to Activities lifecycle. Instead use a caching mechanism
      to retain data, keep Presenters stateless, and destroy Presenters
      when their corresponding Views are destroyed."

---
<h3>Why?</h3>
By having callbacks related to the Activity lifecycle in Presenters, Presenters
become tightly coupled to Activities lifecycle. This can have
a negative impact in terms of maintainability. From an architectural perspective, 
Presenters should not be responsible for
data-related tasks. It is hence advised not to retain Presenters.
An alternative solution would be to use a caching mechanism
to retain data, keep Presenters stateless, and destroy Presenters
when their corresponding Views are destroyed.

<h3>Example</h3>
We created a simple [MVP login Application][github-page]{:target="_blank"}.

MVP event diagram:
<figure>
  <img src="/assets/MVPLogin_injection.png" alt="Login Injection" width="85%">
</figure>

After the login is successful, the AuthComponent gets added to the AppComponent. 
With the <b>plusAuthComponent()</b> method.

<script src="https://gist.github.com/Geertdepont/547535c79f8dd210c7f580de3acd4429.js"></script>

When the GreetActivity and the ViewUserActivity are created. Their respective component is 
being set up and added to the AuthComponent.

<script src="https://gist.github.com/Geertdepont/6bfd1948147766a44579173049aaa979.js"></script>

<script src="https://gist.github.com/Geertdepont/533cae68ef7bbfc49a45cde4b8cd30d6.js"></script>

Our ViewUserPresenter has a one-to-one relationship with viewUsersView. 
This is injected when the ViewUserActivity is created.

<script src="https://gist.github.com/Geertdepont/3cceed203537b7fc29f1cd7a712a2109.js"></script>

Which is provided in our ViewUsersModule.

When the view is added to the module a new ViewPresenter is provided with this	ViewUserView. 
When this view is removed the presenter is removed as well.

<script src="https://gist.github.com/Geertdepont/bb5770a60eff27f2da993c3f46a140d0.js"></script>

When the user logs out, the AuthComponent is removed with the corresponding presenter and view. 
The Presenter only has a reference to the view and not directly to the Activity. 
Dagger injects the Presenter in to the LoginActivity. Dagger also injects the LoginView in the Presenter. 

Once the Activity is destroyed and eligible for garbage collection, 
so is the component and it's dependencies, so memory leaks are avoided.
Dagger performs the maintainability of Presenters.

Check out the [Github page][github-page]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>132</td>
      <td>Use cache a mechanism like LRUCache to retain the data, keep the presenter stateless, and let it recreate with the creation of an activity or fragment.</td>
     <td><a href="https://www.pluralsight.com/guides/mvp-with-testing-part-1" target="_blank">https://www.pluralsight.com/guides/mvp-with-testing-part-1</a></td>
    </tr> 
    <tr>
      <td>181</td>
      <td>Do not create Activitylifecyclestyle callbacks in the Presenter interface. In this way, the presenter would be coupled in particular with the Activity lifecycle. The presenter shouldn’t have a so complex lifecycle.</td>
     <td><a href="https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf" target="_blank">https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf</a></td>
    </tr> 
    <tr>
      <td>184</td>
      <td>No. Do not retain the presenter. I don’t like this solution mainly because I think that presenter is not something we should persist, it is not a data class, to be clear.</td>
     <td><a href="https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf" target="_blank">https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf</a></td>
    </tr> 
        <tr>
      <td>182</td>
      <td>Presenter has a 1to1 relation with the view. The presenter doesn’t make sense without a view. It comes with the view and goes when the view is destroyed. It manages one view at a time.</td>
     <td><a href="https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf" target="_blank">https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf</a></td>
    </tr> 

</table>

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin