---
layout: post
title:  "Business logic should be completely decoupled from the Android framework."
guideline_id: 38
short_description: "Decoupled business logic"
date:   2019-05-21 01:00:04 +0200
categories: clean
doc: "By adhering to
      the clean architecture principles, the innermost layers of an
      app (i.e., where all the business logic of the app resides)
      should be “frontend agnostic”. This means that this layers are
      completely decoupled from the Android framework, and could
      be ideally implemented as pure Java packages. Additionally,
      as this layers represent the core of Android apps, they should
      be developed before all other layers. Changes to the innermost
      layers should be driven exclusively by business decisions."
---

<h3>Why?</h3>
By adhering to
the clean architecture principles, the innermost layers of an
app (i.e., where all the business logic of the app resides)
should be “frontend agnostic”. This means that this layers are
completely decoupled from the Android framework, and could
be ideally implemented as pure Java packages. Additionally,
as this layers represent the core of Android apps, they should
be developed before all other layers. Changes to the innermost
layers should be driven exclusively by business decisions.

<h3>Example</h3>
We created a simple [MVP example][github-page].

If we take a look at our MVP example we see that almost everything is decoupled from our 
Android framework. Only the Activity is coupled to the Android framework. The Presenter only 
views this MainActivity as a View. So there is no direct link to the Android framework.

<figure>
  <img src="/assets/BossApplication_lifecycle.png" alt="Login Injection" width="90%">
</figure>

Each component can easily be tested. 
	Since the MainPresenter has no actual reference to the MainActivity the 
MainPresenter is Android-independent making the presenter testable without an emulator.

<script src="https://gist.github.com/Geertdepont/e8e9996406425a39462b5f03ec0896ff.js"></script>

When the Presenter wants the view to show the users, it calls, mainView.showUsers(Employees).

These are methods accessible by the MainPresenter:
<script src="https://gist.github.com/Geertdepont/608af87f6a302b6d5f66da2582dd5b0c.js"></script>

Check out the [Github page][github-page] to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/Bossapplication" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

{% bibliography %}

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/Bossapplication