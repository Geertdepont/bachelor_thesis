---
layout: post
title: "Models should be evolvable/testable independently from the rest of the app."
guideline_id: 30
short_description: "Models should be evolvable/testable"
date:   2019-05-21 01:00:12 +0200
categories: mvvm
icon: "icon-beaker"
doc: "ViewModels should completely decouple Views from Model
      classes. In such way  Models and Views can evolve independently and be
      tested with ease."

---
<h3>Why?</h3>
Well-designed ViewModels should completely decouple Views from Model
classes. In such way, by strictly adhering to the MVVM
pattern, Models and Views can evolve independently and be
tested with ease. Additionally, by applying the inversion of
control principle and implementing ViewModels decoupled
from the Android framework, it is possible to test ViewModels
via unit tests. In contrast, if the binding between the MVVM
components is too complex and intertwined, testing and debugging Android apps can become a cumbersome challenge.


<h3>Example</h3>
We created a simple [MVVM example][architecture-example]{:target="_blank"}.

This is our current model:
<script src="https://gist.github.com/Geertdepont/e62a8bc6a6a32d822af397e6bee8fdc1.js"></script>

We evolve this model, by adding a new feature:

<script src="https://gist.github.com/Geertdepont/7f3501254b6d2be8b46a0a787a818625.js"></script>

Since Room cannot convert Date value, we need to write our own converter.

<script src="https://gist.github.com/Geertdepont/fa15aa9ffa53d5d3c4710608cade33c6.js"></script>

The <b>@TypeConverters(DateConverter.class)</b> has been added to the top of the Note model.

We change the version of our database from 1 to 2.
And we need to write a migration.

We can now restart the app, and the database has been updated.
Maybe this is a bad example, but when we create a new feature for our model.
We can evolve our model and test it without creating a new view.

Check this [page][architecture-example]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/ArchitectureExample" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>108</td>
      <td>The view model isolates the view from the model classes and allows the model to evolve independently of the view.</td>
     <td><a href="https://fernandocejas.com/2018/05/07/architecting-android-reloaded/" target="_blank">https://fernandocejas.com/2018/05/07/architecting-android-reloaded/</a></td>
    </tr>    
    <tr>
      <td>169</td>
      <td>If the data binding logic is too complex, application debug will be a little harder.</td>
     <td><a href="https://stfalcon.com/en/blog/post/android-mvvm" target="_blank">https://stfalcon.com/en/blog/post/android-mvvm</a></td>
    </tr>  
    <tr>
      <td>262</td>
      <td>[MVVM] DataModel: The use of inversion of control pattern, heavily applied in our code, and the lack of any Android classes, facilitate the implementation of unit tests of the DataModel.</td>
     <td><a href="https://medium.com/upday-devs/android-architecture-patterns-part-3-model-view-viewmodel-e7eeee76b73b" target="_blank">https://medium.com/upday-devs/android-architecture-patterns-part-3-model-view-viewmodel-e7eeee76b73b</a></td>
    </tr>    
</table>

[architecture-example]: https://github.com/Geertdepont/bachelor_thesis/tree/master/ArchitectureExample