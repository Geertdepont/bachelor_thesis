---
layout: post
title: " Design components to be as independent as possible, build them around the features of the app and make them Android-independent."
short_description: "Design independent components"
guideline_id: 2
date:   2019-05-21 01:00:40 +0200
categories: generic
icon: "icon-circle-blank"
doc: "When common functionalities are not provided in base classes duplicated code is often produced.
      Decoupled components make it easier to focus on app functionalities and enables higher testability of the core logic of the app by making components 
      unit-testable."

---
<h3>Why?</h3>
 As also remarked by two
interviewees, a recurrent problem arises when common functionalities 
are not provided in base classes. This often leads to
duplicated code, reducing the maintainability and testability of
the app. Ideally, components should be independent from each
other and their business logic should be clear and explicitly
separated. By quoting one of the data points “your architecture
should scream the purpose of the app”. Decoupled components
make it easier to focus on app functionalities and their issues,
without dealing with bloatware. Additionally, this enables a
higher testability of the core logic of the app by making components 
unit-testable (ideally without requiring an emulator).
Finally, by decoupling the business logic from frameworks,
more emphasis is put on the business logic, making an app
more testable, maintainable, and of low technical debt.

<h3>Example</h3>
We created a simple [Boss Application][boss-application]{:target="_blank"} which retrieves users from a dummy API. 

The three main components from the BossApplication are:
<ul>
<li>Model</li>
<li>Presenter</li>
<li>View</li>
</ul>

The event diagram of the Boss Application:
<figure>
  <img src="/assets/BossApplication_lifecycle.png" alt="Login Injection" width="90%">
</figure>

Each component can be easily tested. Since the MainPresenter has no actual reference to the MainActivity the 
MainPresenter is Android-independent making this presenter testable without an emulator.
The MainPresenter is also not able to call methods from the MainActivity which are not specified in the MainView.

<script src="https://gist.github.com/Geertdepont/f028365580bd4d1543d08da070774860.js"></script>

Which has a reference to the MainView.

<script src="https://gist.github.com/Geertdepont/608af87f6a302b6d5f66da2582dd5b0c.js"></script>

Check out the [Github page][boss-application]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/Bossapplication" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>235</td>
      <td>As Robert Martin, aka Uncle Bob, says, “Your architecture should scream the purpose of the app.” More technically said, business logic should be clearly separated and independent of the framework.</td>
      <td><a href="https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/" target="_blank"> https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/</a></td>
    </tr>
    <tr>
      <td>236</td>
      <td>Satisfy a multitude of stakeholders: all interactions are separated in the classes/modules/components/whatever whose job is interactions, and that particular developer works only on those components while working on the UX part of the app.</td>
      <td><a href="https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/" target="_blank"> https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/</a></td>
    </tr>
    <tr>
      <td>210</td>
      <td>Decoupled code makes it easy to focus your attention on specific issues without a lot of bloatware getting in the way</td>
      <td><a href="https://medium.com/@dmilicic/a-detailed-guide-on-developing-android-apps-using-the-clean-architecture-pattern-d38d71e94029" target="_blank"> https://medium.com/@dmilicic/a-detailed-guide-on-developing-android-apps-using-the-clean-architecture-pattern-d38d71e94029</a></td>
    </tr>
    <tr>
      <td>106</td>
      <td>Feature switching: This is not really something that you must have, but in some cases it can be useful. Feature switching basically allows you to configure set of features/screens which should be enabled in the app, this could be done via local configuration or remotely (e.g Firebase Remote Config). I especially recommend to have remote feature switching if your application contains functionality dependent on external web services. If external API fails, dependent features in your app will stop working as well. In such situation you should disable broken feature ASAP to avoid annoying users. If you have a remote configuration setup you can just disable given feature in remote console, until the API starts working again.</td>
      <td><a href="https://medium.com/stepstone-tech/considering-architecture-for-android-app-f7f0fabf680a" target="_blank"> https://medium.com/stepstone-tech/considering-architecture-for-android-app-f7f0fabf680a</a></td>
    </tr>
    <tr>
      <td>232</td>
      <td>It’s all about decoupling your business logic from the outside world (meaning frameworks, implementation details, etc.) and ending up with the maintainable, testable and with low technical debt application</td>
      <td><a href="http://pguardiola.com/blog/clean-architecture-part-1/" target="_blank"> http://pguardiola.com/blog/clean-architecture-part-1/</a></td>
    </tr>    
    <tr>
      <td>238</td>
      <td>Run away from the real world (Android, DB, Internet…). We have already said that we want to scream what the app really does; that’s it. We want to emphasize business logic and leave framework details under the hood. This point should be even stronger: we would like to not only hide framework details but all the details related to the outside world.</td>
      <td><a href="https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/" target="_blank"> https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/</a></td>
    </tr>
    <tr>
      <td>239</td>
      <td>Enable your components to be testable. You should unit test your app as much as possible and your architecture should allow you to do it. If you can’t unit test everything, you should at least cover your business logic with tests. Separation from the real world goes nicely with this. It’s easier to test your business logic if it is clearly separated from the rest of the app.</td>
      <td><a href="https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/" target="_blank"> https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/</a></td>
    </tr>
</table>

[boss-application]: https://github.com/Geertdepont/bachelor_thesis/tree/master/Bossapplication