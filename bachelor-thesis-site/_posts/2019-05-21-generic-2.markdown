---
layout: post
title: " Design components to be as independent as possible, build them around the features of the app and make them Android-independent."
short_description: "Design independent components"
guideline_id: 2
date:   2019-05-21 01:00:40 +0200
categories: generic
doc: " As also remarked by two
      interviewees, a recurrent problem arises when common functionalities 
      are not provided in base classes. This often leads to
      duplicated code, reducing the maintainability and testability of
      the app. Ideally, components should be independent from each
      other and their business logic should be clear and explicitly
      separated. By quoting one of the data points “your architecture
      should scream the purpose of the app”. Decoupled components
      make it easier to focus on app functionalities and their issues,
      without dealing with bloatware. Additionally, this enables a
      higher testability of the core logic of the app by making components 
      unit-testable (ideally without requiring an emulator).
      Finally, by decoupling the business logic from frameworks,
      more emphasis is put on the business logic, making an app
      more testable, maintainable, and of low technical debt."

---
<h3>Why?</h3>
 As also remarked by two
interviewees, a recurrent problem arises when common functionalities 
are not provided in base classes. This often leads to
duplicated code, reducing the maintainability and testability of
the app. Ideally, components should be independent from each
other and their business logic should be clear and explicitly
separated. By quoting one of the data points “your architecture
should scream the purpose of the app”. Decoupled components
make it easier to focus on app functionalities and their issues,
without dealing with bloatware. Additionally, this enables a
higher testability of the core logic of the app by making components 
unit-testable (ideally without requiring an emulator).
Finally, by decoupling the business logic from frameworks,
more emphasis is put on the business logic, making an app
more testable, maintainable, and of low technical debt.

<h3>Example</h3>
We created a simple [Boss Application][boss-application]{:target="_blank"} which retrieves users from a dummy API. 

The three main components from the BossApplication are:
<ul>
<li>Model</li>
<li>Presenter</li>
<li>View</li>
</ul>

The event diagram of the Boss Application:
<figure>
  <img src="/assets/BossApplication_lifecycle.png" alt="Login Injection" width="700">
</figure>

Each component can be easily tested. Since the MainPresenter has no actual reference to the MainActivity the 
MainPresenter is Android-independent making this presenter testable without an emulator.
The MainPresenter is also not able to call methods from the MainActivity which are not specified in the MainView.

<script src="https://gist.github.com/Geertdepont/f028365580bd4d1543d08da070774860.js"></script>

Which has a reference to the MainView.

<script src="https://gist.github.com/Geertdepont/608af87f6a302b6d5f66da2582dd5b0c.js"></script>

Check out the [Github page][boss-application]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/Bossapplication" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

[boss-application]: https://github.com/Geertdepont/bachelor_thesis/tree/master/Bossapplication