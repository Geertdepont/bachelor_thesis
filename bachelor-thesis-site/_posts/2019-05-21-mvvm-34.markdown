---
layout: post
title:  "Keep ViewModels as simple as possible. When needed, transfer responsibility to other layers."
guideline_id: 34
short_description: "Keep ViewModels as simple as possible."
date:   2019-05-21 01:00:08 +0200
categories: mvvm
doc: "Delegating responsibilities from the ViewModels to other layers results into smaller and more understandable ViewModels.
       It also makes testing the whole architecture easier since each component can be tested separately."

---
<h3>Why?</h3>
Delegating responsibilities from the ViewModels to other layers results into smaller and more understandable ViewModels.
 It also makes testing the whole architecture easier. Since each component can be tested separately.
  Instead of asserting that a View needs to behave after a certain retrieval from the model, the model now can be tested independently.

<h3>Example</h3>
We created a simple [MVVM example][MVVM-example]{:target="_blank"}.


Our MVVM example depicted:
<figure>
  <img src="/assets/RXJava_depicted.png" alt="MVVM depicted" width="85%">
</figure>

The only job of the viewModel is to listen to the Repository. And when new data is emitted, the data is placed in MutableLiveData.

<script src="https://gist.github.com/Geertdepont/b39b4380e506bd66d469fd2bca7deafa.js"></script>

And what the MainActivity has to do is observe this data.

<script src="https://gist.github.com/Geertdepont/ca639b53cc3110ff30860c1dd05283aa.js"></script>

Check this [page][MVVM-example]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/RxjavaRetrofitGithub" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>


This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>225</td>
      <td>[On MVVM] The View Model should not do any of the things the components above can do. The View Model should coordinate the process of creating view entities and put all the pieces together. After doing this we noticed several benefits: the most obvious one was that the view models have a much smaller size, everything was easier to test since each class has a more specific and narrow responsibility, it is more clear what are the inputs/outputs and what is expected from each class. Of course this also makes the whole presentation layer more understandable and readable.</td>
     <td><a href="https://medium.com/insiden26/reactive-clean-architecture-with-android-architecture-components-685a6682e0ca" target="_blank">https://medium.com/insiden26/reactive-clean-architecture-with-android-architecture-components-685a6682e0ca</a></td>
    </tr>   
    <tr>
      <td>224</td>
      <td>In MVVM pattern, the ViewModel is the component that interacts with the views, this leads to often have big view models, especially when the screen is complex. We tried to simplify our view models delegating some responsibilities to other components: - Mappers and transformers: They transform the objects coming from the domain layer to view entities. - Providers: Sometimes we need something from the framework to build our view entity, for instance, we might need a specific string. We create the StringProvider to abstract the access to this resource. - Utilities: There is not much to say here, these are the classical utility classes that contain helper functions.</td>
     <td><a href="https://medium.com/insiden26/reactive-clean-architecture-with-android-architecture-components-685a6682e0ca" target="_blank">https://medium.com/insiden26/reactive-clean-architecture-with-android-architecture-components-685a6682e0ca</a></td>
    </tr>    
</table>

[MVVM-example]: https://github.com/Geertdepont/bachelor_thesis/tree/master/RxjavaRetrofitGithub
