---
layout: post
title:  "Keep ViewModels as simple as possible. When needed, transfer responsibility to other layers."
guideline_id: 34
short_description: "Keep ViewModels as simple as possible."
date:   2019-05-21 01:00:08 +0200
categories: mvvm
---
<h3>Why?</h3>
Delegating responsibilities from the ViewModels to other layers results into smaller and more understandable ViewModels.
 It also makes testing the whole architecture easier. Since each component can be tested separately.
  Instead of asserting that a View needs to behave after a certain retrieval from the model, the model now can be tested independently.

<h3>Example</h3>
We created a simple [MVVM example][MVVM-example]{:target="_blank"}.


Our MVVM example depicted:
<figure>
  <img src="/assets/RXJava_depicted.png" alt="MVVM depicted" width="600">
</figure>

The only job of the viewModel is to listen to the Repository. And when new data is emitted, the data is placed in MutableLiveData.

<script src="https://gist.github.com/Geertdepont/b39b4380e506bd66d469fd2bca7deafa.js"></script>

And what the MainActivity has to do is observe this data.

<script src="https://gist.github.com/Geertdepont/ca639b53cc3110ff30860c1dd05283aa.js"></script>

Check this [page][MVVM-example]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/RxjavaRetrofitGithub" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

[MVVM-example]: https://github.com/Geertdepont/bachelor_thesis/tree/master/RxjavaRetrofitGithub
