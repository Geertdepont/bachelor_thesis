---
layout: post
title: "Views are passive and should always manage and expose only their state."
guideline_id: 23
short_description: "Views are passive"
date:   2019-05-21 01:00:19 +0200
categories: mvp
icon: "icon-time"
doc: "Views contain attributes which can be visible and non-visible. 
      It is the Presenter’s task to change the state of the View. 
      However, whenever an Activity is killed, it is not the task of the 
      Presenter to check this and reconfigure this Activity."

---
<h3>Why?</h3>
Views contain attributes which can be visible and non-visible. 
It is the Presenter’s task to change the state of the View. 
However, whenever an Activity is killed, it is not the task of the 
Presenter to check this and reconfigure this Activity.


<h3>Example</h3>
We created a simple [MVP login Application][github-page]{:target="_blank"}.


<figure>
  <img src="/assets/MVPLogin_showUsers.png" alt="Login Injection" width="85%">
</figure>

As can be seen in this graph. 
	Views are passive.
	They only do what their presenters tell them to do.

Check out the [Github page][github-page]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>165</td>
      <td>In MVP (or at least, in our vision of MVP) it is only the view that holds the current state of itself. Think about a screen that shows a “Loading….” spinner: the Presenter sets such spinner to visible, and once the requested data is loaded the spinner is hidden. But what happens if, in the meantime, the presenter wants to know if the spinner is visible? It can either privately keep this information or query the view for it. Now, what if the screen has more and more features? Is the presenter going to keep the current “state” of every single button, view, list along with the business logic of the app? Well, if yes: the complexity to keep synchronised what the view is showing and what the presenter knows about the view will easily explode. Because an Android View is a very transient object, that could be destroyed at any given moment, and because the View is the state, it is hard to keep track and recreate exactly the last screen visualized to the user.</td>
     <td><a href="https://blog.shazam.com/android-apply-redux-2ad0f7355e0" target="_blank">https://blog.shazam.com/android-apply-redux-2ad0f7355e0</a></td>
    </tr> 
    <tr>
      <td>175</td>
      <td>One of the biggest problems of Android is that views (Activities, Fragments,…) aren’t easy to test because of the framework complexity. To solve this problem, you should implement the Passive View pattern. The implementation of this pattern reduces the behavior of the view to the absolute minimum by using a controller, in our case, the presenter. For example, if you have a username/password form and a “submit” button, you don’t write the validation logic inside the view but inside the presenter. Your view should just collect the username and password and send them to the presenter.</td>
     <td><a href="https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf" target="_blank">https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf</a></td>
    </tr>   
</table>

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin