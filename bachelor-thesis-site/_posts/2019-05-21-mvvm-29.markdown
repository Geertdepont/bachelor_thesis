---
layout: post
title: "The app should possess a single source of truth of data."
guideline_id: 30
short_description: "The app should possess a single source of truth of data."
date:   2019-05-21 01:00:13 +0200
categories: mvvm
icon: "icon-sitemap"
doc: "Using one designated data source avoid data inconsistencies and conflicting Views."
---
<h3>Why?</h3>
In the context of mobile applications,
consistency of data can become an issue. While caching
mechanisms allow to save energy and bandwidth, multiple data
sources can create inconsistencies and even conflicting Views.
In order to avoid such issues, it is recommended to designate
a dedicated component as single source of truth for the
entire app. Specifically, in the context of MVVM, the Room
persistence library is an official architectural component of
Android which is specifically tailored for such task.


<h3>Example</h3>
We created a simple [MVVM example][architecture-example]{:target="_blank"}.

In our example the viewModel contains only one database.
Whenever someone creates a Repository, an instance of the NoteDatabase gets requested.
This NoteDatabase is a singleton, so each repository will contain the same database. 

<script src="https://gist.github.com/Geertdepont/6c49b1e410789359624d30622c82c03d.js"></script>

To retrieve or insert data into the database, the noteDao has to be used.

Check this [page][architecture-example]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/ArchitectureExample" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>89</td>
      <td>Using this model, the database serves as the single source of truth, and other parts of the app access it using our UserRepository. Regardless of whether you use a disk cache, we recommend that your repository designate a data source as the single source of truth for the rest of your app.</td>
     <td><a href="https://developer.android.com/jetpack/docs/guide" target="_blank">https://developer.android.com/jetpack/docs/guide</a></td>
    </tr>    
    <tr>
      <td>201</td>
      <td>What if we only have one single source of truth for state passed from bottom (business logic) to the top (the View). [It would be a very good thing]</td>
     <td><a href="http://hannesdorfmann.com/android/mosby3-mvi-1" target="_blank">http://hannesdorfmann.com/android/mosby3-mvi-1</a></td>
    </tr>    
    <tr>
      <td>88</td>
      <td>By relying on our current implementation in this situation, we need to fetch the data again from the network. This refetching process isn't just a bad user experience; it's also wasteful because it consumes valuable mobile data. You could fix this issue by caching the web requests, but that creates a key new problem: What happens if the same user data shows up from another type of request, such as fetching a list of friends? The app would show inconsistent data, which is confusing at best. The proper way to handle this situation is to use a persistent model. This is where the Room persistence library comes to the rescue.</td>
     <td><a href="https://developer.android.com/jetpack/docs/guide" target="_blank">https://developer.android.com/jetpack/docs/guide</a></td>
    </tr>    
</table>

[architecture-example]: https://github.com/Geertdepont/bachelor_thesis/tree/master/ArchitectureExample