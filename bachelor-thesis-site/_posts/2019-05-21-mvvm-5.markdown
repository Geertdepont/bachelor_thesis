---
layout: post
title:  "Views should always know about changes after ViewModels, no matter how trivial an operation may be."
short_description: "Views should always know about changes after ViewModels"
guideline_id: 5
short_description: "Views should always know about changes after ViewModels"
date:   2019-05-21 01:00:10 +0200
icon: "icon-stethoscope"
categories: mvvm
doc: "All the logic in the Views should be moved to the ViewModels and the ViewModels should pre-process the data to be ready
      to be used by Views"

---
<h3>Why?</h3>
Adhering to this guideline implies that all the logic
in the Views should be moved to the ViewModels. While the
purpose of ViewModels is to pre-process data to be ready
to use by Views, it might be tempting to implement minor
operations in Views. Nevertheless, adhering to this guideline
guarantees a higher level of consistency and reliability of all
the components which are based on the ViewModels.



<h3>Example</h3>
We created a simple [MVVM example][architecture-example]{:target="_blank"}.

Our viewModel provides all the data for the View.
When a new note is added to the model, the list of notes has been changed, and a new stream from the model to the viewModel is passed.
The View observes this changed list and updates the view.


<script src="https://gist.github.com/Geertdepont/06e30ce3516c8ad36134543c9cbfe036.js"></script>

<script src="https://gist.github.com/Geertdepont/0cf01c5b3504ad226e946d261908cf44.js"></script>

Check this [page][architecture-example]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/ArchitectureExample" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>228</td>
      <td>[MVVM+RxJava] Everything goes through the view model: the view model transforms the data into something that is easy to use in the Views or any other consumer, this means the view should know about the changes always after the view model. So basically, it doesn’t matter how trivial or easy an operation is, everything should go through the view model, this way other stuff that is based on the view model’s state can happen reliably. The view should know about the changes always after the view model.</td>
     <td><a href="https://medium.com/upday-devs/mvvm-rxjava-learnings-1819423f9592" target="_blank">https://medium.com/upday-devs/mvvm-rxjava-learnings-1819423f9592</a></td>
    </tr>    
</table>

[architecture-example]: https://github.com/Geertdepont/bachelor_thesis/tree/master/ArchitectureExample