---
layout: post
title:  "Each architectural layer should possess its own data model"
guideline_id: 41
short_description: "Each architectural layer should possess its own data model"
date:   2019-05-21 01:00:01 +0200
categories: clean
doc: "By implementing a data model at every
      layer, a high degree of decoupling between layers can be
      achieved. Specifically, by following this guideline, the outer
      layers of apps can be implemented without any explicit knowledge of the implementation details of the inner layers. This
      means that the origin of the data becomes transparent to the
      client and hence, in a repository pattern fashion, data sources
      can be added, removed, or changed without much effort."
---
<h3>Why?</h3>
By implementing a data model at every
layer, a high degree of decoupling between layers can be
achieved. Specifically, by following this guideline, the outer
layers of apps can be implemented without any explicit knowledge of the implementation details of the inner layers. This
means that the origin of the data becomes transparent to the
client and hence, in a repository pattern fashion, data sources
can be added, removed, or changed without much effort.

<h3>Example</h3>
We created a simple [MVP login Application][github-page]{:target="_blank"}. 

<figure>
  <img src="/assets/MVPLogin_depicted.png" alt="Login depicted" width="85%">
</figure>

Each layer works with its own model.
The View layer works with the Presenter.
The Presenter works with the Model.
If we change the way we store the data from the model, the View would not need to know.
Since the View receives the same data.

Check out the [Github page][github-page]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  
<tr>
       
   <th>Id</th>
       
   <th>Guideline</th>
       
   <th>URL</th>
     
</tr>
 
<tr>
       
   <td>190</td>
       
   <td> Data layer: Use a Repository pattern. The idea behind all this is that the origin of the data is transparent to the client, which does not care if the data is coming from memory, disk or the cloud, the only truth is that the information will arrive and will be gotten.</td>
       
   <td><a href=" https://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/
      " target="_blank"> https://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/
      </a>
   </td>
    
</tr>
 
<tr>
       
   <td>126</td>
       
   <td> Every layer to have its own model that it works with, so the concrete details, such as views, do not depend on the specific details of the lower layer implementations.</td>
       
   <td><a href=" https://dev.to/wahibhaq/a-brief-summary-of-thoughts-on-clean-architecture-and-mvp-48h9
      " target="_blank"> https://dev.to/wahibhaq/a-brief-summary-of-thoughts-on-clean-architecture-and-mvp-48h9
      </a>
   </td>
    
</tr>
 
<tr>
       
   <td>253</td>
       
   <td> [On clean ark] It is a good practice for every layer to have its own model that it works with, so your concrete details, such as views, do not depend on the specific details of your lower layer implementations. This way, you wonâ€™t have to break unrelated code if you, for example, decide to change from one ORM to another. To make that possible, it is necessary to use object mappers in each layer.</td>
       
   <td><a href=" https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/
      " target="_blank"> https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/
      </a>
   </td>
    
</tr>
 
<tr>
       
   <td>233</td>
       
   <td> [Hexagonal ark] The main objective of this architecture is to separate concerns and have the business logic isolated, through the implementation of Ports and Adapters</td>
       
   <td><a href=" http://pguardiola.com/blog/clean-architecture-part-1/
      " target="_blank"> http://pguardiola.com/blog/clean-architecture-part-1/
      </a>
   </td>
    
</tr>
</table>

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin

