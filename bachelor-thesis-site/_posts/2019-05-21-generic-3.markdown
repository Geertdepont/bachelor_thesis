---
layout: post
title: "Counter the tendency of Activities to grow too big in size due to functionality/responsibility bloat."
short_description: "Counter the tendency of Activities to grow too big"
guideline_id: 3
date:   2019-05-21 01:00:39 +0200
categories: generic
doc: "Android Activities should ideally contain exclusively logic handling the
      user interface (UI) and operating system interactions. Nevertheless, a common architectural issue consists of delegating too
      many functionalities and responsibilities to a single Activity, leading them to become god-classes."

---
<h3>Why?</h3>
Android
Activities should ideally contain exclusively logic handling the
user interface (UI) and operating system interactions. Nevertheless, a common architectural issue consists of delegating too
many functionalities and responsibilities to a single Activity.
This leads to Activities slowly becoming god-classes. As the
Android framework does not support the reuse of methods
implemented in activities, code tends to be directly copied into
other ones, increasing code duplication and impacting negatively the app’s maintainability. Additionally, testing might
become a challenging task, as complex business logic could
reside in Activities, which by themselves result arduous to unit
test. Finally, as activities are kept in memory at runtime, “godactivities” can lead to the deterioration of apps’ performance.

<h3>Example</h3>
We created a simple [MVP login Application][MVP-Login]{:target="_blank"}. 

Too counter the tendency of Activities to grow too big. We let activities only be the visual 
aspect of our application. Our LoginActivity implements the LoginView class.

<script src="https://gist.github.com/Geertdepont/93684c21bc51c4b7379f18ff47596791.js"></script>

Our LoginActivity has two text fields:
<ul>
<li>Email field <b>(edit_email)</b></li>
<li>Password field <b>(edit_password)</b></li>
</ul>

And two buttons:
<ul>
<li>Create new user <b>(buttonAddUser)</b></li>
<li>Login button <b>(btnLogin)</b></li>
</ul>

<script src="https://gist.github.com/Geertdepont/f46beeeb2ee18b532d02fbadf38cd237.js"></script>

The event diagram of the Login Application:
<figure>
  <img src="/assets/MVPLogin_event_diagram.png" alt="Login Event diagram" width="90%">
</figure>

We do not want our LoginActivity to create a database, and store and retrieve all the users.
We want to share as much responsibilities to another layer as possible. 

Our LoginActivity only does what our presenter tells it to do. So our LoginActivity does not become a God class. This also makes it easier to test our views and presenter.

Our interactor checks if the password given matches the password of the gotten user.
This is a simplistic example and in real life applications, the validation of passwords would have been done differently.

<br>
Check out the [Github page][MVP-Login] to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>82</td>
      <td>Activities and Fragments should only contain logic that handles UI and operating system interactions.</td>
      <td><a href="https://developer.android.com/jetpack/docs/guide" target="_blank">https://developer.android.com/jetpack/docs/guide</a></td>
    </tr>
    <tr>
      <td>139</td>
      <td>Use a single activity for the whole flow</td>
      <td><a href="https://blog.gojekengineering.com/an-architectural-overview-of-the-new-go-jek-rider-app-bb1dbd174323" target="_blank">https://blog.gojekengineering.com/an-architectural-overview-of-the-new-go-jek-rider-app-bb1dbd174323</a></td>
    </tr>
    <tr>
      <td>150</td>
      <td>Activities and Fragments become very large and difficult to maintain</td>
      <td><a href="https://labs.ribot.co.uk/android-application-architecture-8b6e34acda65" target="_blank">https://labs.ribot.co.uk/android-application-architecture-8b6e34acda65</a></td>
    </tr>    
    <tr>
      <td>152</td>
      <td>Unit testing becomes challenging, if not impossible, because a lot of the logic lives within the Activities or Fragments that are arduous to unit test.</td>
      <td><a href="https://labs.ribot.co.uk/android-application-architecture-8b6e34acda65" target="_blank">https://labs.ribot.co.uk/android-application-architecture-8b6e34acda65</a></td>
    </tr>    
    <tr>
      <td>161</td>
      <td>Activities and Fragments become very lightweight. Their only responsibilities are to set up/update the UI and handle user events. Therefore, they become easier to maintain.</td>
      <td><a href="https://labs.ribot.co.uk/android-application-architecture-8b6e34acda65" target="_blank">https://labs.ribot.co.uk/android-application-architecture-8b6e34acda65</a></td>
    </tr>
    <tr>
      <td>240</td>
      <td>God Activity: We have an activity that touches databases, goes to the Internet, does parsing, spawns threads, and renders data. So, all the stakeholders are looking at the single class, none of the concerns is separated, it’s not testable, and business logic is mixed with the Android stuff.</td>
      <td><a href="https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/" target="_blank">https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/</a></td>
    </tr>    
    <tr>
      <td>254</td>
      <td>Activities were often bloated with multiple responsibilities. There was a lot of code duplication custom views and custom logic.</td>
      <td><a href="https://academy.realm.io/posts/converting-an-app-to-use-clean-architecture/" target="_blank">https://academy.realm.io/posts/converting-an-app-to-use-clean-architecture/</a></td>
    </tr>
    
</table>

[MVP-Login]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin