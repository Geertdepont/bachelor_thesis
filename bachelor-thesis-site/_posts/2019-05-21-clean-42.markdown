---
layout: post
title:  "Keep the UI thread as lightweight and isolated as possible."
guideline_id: 42
short_description: "The UI thread "
date:   2019-05-21 01:00:00 +0200
categories: clean
doc: "Presenters should be composed with interactor components which are responsible for executing tasks
      outside the main UI thread of the app. "

---
<h3>Why?</h3>
In accordance to guidelines CLEAN-1
and CLEAN-2, presenters residing in the outer layers of
apps modeled through clean architecture principles should
be kept lightweight. In fact, Presenters should be composed
with interactor components, i.e., use cases residing in the
business logic layers, which are responsible for executing tasks
outside the main UI thread of the app. Once the task are
finished, the Views are updated through a callback with the
processed data. Besides callback-based communication among
components, other techniques used in order to keep the UI
thread lightweight rely on the inversion of control principle
and intent-based communication.

<h3>Example</h3>
We created a simple [MVP login Application][github-page]{:target="_blank"}. The event diagram of the MVP login:

Each presenter in our MVP Login example contains an interactor. And performs the job in a 
new thread, and comes back using a callback.


<figure>
  <img src="/assets/MVPLogin_injection.png" alt="Login Injection" width="90%">
</figure>


This keeps the UI thread lighter than when the MainActivity would perform the request on the MainThread.

Check out the [Github page][github-page]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin

This guideline was extracted from:
<table id="guidelinelinks">
    <tr>
       <th>Id</th>
       <th>Guideline</th>
       <th>URL</th>
    </tr>
    <tr>
       <td>187</td>
       <td> Presentation layer: Presenters in this layer are composed with interactors (use cases) that perform the job in a new thread outside the main android UI thread, and come back using a callback with the data that will be rendered in the view.</td>
       <td><a href=" https://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/" target="_blank"> https://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/</a></td>
    </tr>
    <tr>
       <td>193</td>
       <td>
          Data transformation/composition: we can combine multiple Observables
          <T>
          without affecting the client, which makes our solution more scalable.
       </td>
       <td><a href="https://fernandocejas.com/2015/07/18/architecting-android-the-evolution/" target="_blank"> https://fernandocejas.com/2015/07/18/architecting-android-the-evolution/</a></td>