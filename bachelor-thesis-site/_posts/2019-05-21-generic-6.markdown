---
layout: post
title: " Organize your Java/Kotlin packages and files either by layer or by app feature."
guideline_id: 6
short_description: "Organize packages"
date:   2019-05-21 01:00:36 +0200
categories: Generic
---
<h3>Why?</h3>
When organizing your packages and files by layer or by feature, it becomes easier for 
programmers to find the code which performs a certain aspect of your application.
By layer or by feature both have their advantages. However when packaging by layer, 
whenever a feature has to be changed, multiple files in different packages need to be changed. 
As however in packaging by feature this is less the case.

<h3>Example</h3>
Our [MVVM-example][MVVM-example] somehow needs to reflect that it uses this architecture.
<figure>
  <img src="/assets/Rxjava_packages.png" alt="Rxjava packages" width="300">
</figure>

As you can see there are three main packages:
<ul>
<li>Service</li>
<li>View</li>
<li>ViewModel</li>
</ul>

In the service package everything with data preparation is taken care of.
E.g. fetching data from the server. Putting the fetched data into mutableLiveData.
The ViewModel exposes methods which help maintain the view.

Our [MVP][github-page] also somehow needs to reflect it's architecture.

<figure>
  <img src="/assets/MVP_packages.png" alt="MVP packages" width="300">
</figure>

As you can see there are three main packages:
<ul>
<li>View</li>
<li>Model</li>
<li>Presenter</li>
</ul>

Check out both the [MVVM example][MVVM-example] and the [MVP example][github-page] on these links.

[MVVM-example]: https://github.com/Geertdepont/bachelor_thesis/tree/master/RxjavaRetrofitGithub
[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin