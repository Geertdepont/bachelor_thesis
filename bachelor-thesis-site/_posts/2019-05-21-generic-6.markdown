---
layout: post
title: " Organize your Java/Kotlin packages and files either by layer or by app feature."
guideline_id: 6
short_description: "Organize packages"
date:   2019-05-21 01:00:36 +0200
categories: generic
icon: "icon-folder-open"
doc: "By organizing your packages and files  it becomes easier for 
      programmers to find the code which performs a certain aspect of your application."

---
<h3>Description</h3>
By organizing your packages and files  it becomes easier for 
programmers to find the code which performs a certain aspect of your application.
Whenever a feature has to be changed in layer-organized file system, multiple files in different packages need to be changed. 
As however in packaging by feature this is less the case.

<h3>Example</h3>
Our [MVVM-example][MVVM-example] somehow needs to reflect that it uses this architecture.
<figure>
  <img src="/assets/Rxjava_packages.png" alt="Rxjava packages" width="50%">
</figure>

As you can see there are three main packages:
<ul>
<li>Service</li>
<li>View</li>
<li>ViewModel</li>
</ul>

In the service package everything with data preparation is taken care of.
E.g. fetching data from the server. Putting the fetched data into mutableLiveData.
The ViewModel exposes methods which help maintain the View. 
And the View handles the UI events and maps them to them to the ViewModel.

Our [MVP][github-page]{:target="_blank"} also somehow needs to reflect it's architecture.

<figure>
  <img src="/assets/MVP_packages.png" alt="MVP packages" width="60%">
</figure>

As you can see there are three main packages:
<ul>
<li>View</li>
<li>Model</li>
<li>Presenter</li>
</ul>

In the model all the data management is taken care of. 
The Presenter queries the data from the model, and returns it to the View.
And the View presents the data to the user in a way the Presenter decided.

Check out both the [MVVM example][MVVM-example]{:target="_blank"} and the [MVP example][github-page]{:target="_blank"} on these links.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/RxjavaRetrofitGithub" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">MVVM example</button></a>
<a href=" https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">MVP example</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>111</td>
      <td>Code/package organization is one of the key factors of a good architecture: package structure is the very first thing encountered by a programmer when browsing source code. Everything flows from it. Everything depends on it.</td>
      <td><a href="https://fernandocejas.com/2018/05/07/architecting-android-reloaded/" target="_blank">https://fernandocejas.com/2018/05/07/architecting-android-reloaded/</a></td>
    </tr>     
    <tr>
      <td>195</td>
      <td>I consider code/package organization one of the key factors of a good architecture: package structure is the very first thing encountered by a programmer when browsing source code. Everything flows from it. Everything depends on it. Either package by layer of functionality.</td>
      <td><a href="https://fernandocejas.com/2015/07/18/architecting-android-the-evolution/" target="_blank">https://fernandocejas.com/2015/07/18/architecting-android-the-evolution/</a></td>
    </tr>       
    <tr>
      <td>256</td>
      <td>For example, you should be able to look at a package structure and understand how it’s organized. I often think about this from the perspective of writing open source code: would my code be apparent to I don’t know, and who isn’t on my team?</td>
      <td><a href="https://academy.realm.io/posts/converting-an-app-to-use-clean-architecture/" target="_blank">https://academy.realm.io/posts/converting-an-app-to-use-clean-architecture/</a></td>
    </tr>   

</table>

[MVVM-example]: https://github.com/Geertdepont/bachelor_thesis/tree/master/RxjavaRetrofitGithub
[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin