---
layout: post
title: "Decouple components and explicitly inject/manage the dependencies among them"
short_description: "Decouple components"
guideline_id: 1
date:   2019-05-21 01:00:41 +0200
categories: generic
doc: "While not strictly necessary, utilizing a dependency injection framework
      can drastically simplify the management of dependencies between Android architectural components. 
      This supports a clean decoupling of architectural components and avoids unnecessary boilerplate for connecting them.
       Doing so not only improves the maintainability of the app, but also improves its testability by providing the possibility 
       to inject mock implementations. The Dagger framework is commonly recommended to inject dependencies and solve problems 
       afflicting reflection-based solutions."

---
<h3>Why?</h3>
While not strictly necessary, utilizing a dependency injection framework
can drastically simplify the management of dependencies between Android architectural components. 
This supports a clean decoupling of architectural components and avoids unnecessary boilerplate for connecting them.
 Doing so not only improves the maintainability of the app, but also improves its testability by providing the possibility 
 to inject mock implementations. The Dagger framework is commonly recommended to inject dependencies and solve problems 
 afflicting reflection-based solutions.

<h3>Introduction</h3>
Dependency injection is a technique whereby one object supplies dependencies of another object.
So let's say I'm a chef in a kitchen. And I need to make meals for the customers.
But if I don't have the tools to create my dishes, nothing happens. I crash.
So we need someone to supply the tools, which is <b>Dagger</b>.

<b>Dagger</b> tells where all the dependencies are, and tells the objects not to worry. Because Dagger will provide the 
dependencies. To perform this dependency injection, dagger uses the following annotation:

<ul>
  <li><b>@Module and @Provides:</b> These classes provide the dependencies.</li>
  <li><b>@Inject: </b> The field which will be injected, this can be a field, a constructor or a method.</li>
  <li><b>@Component:</b> Which uses the selected modules, and performs the dependency injection.</li>
</ul>



<h3>Example</h3>
We created a simple [MVP login Application][github-page]. The event diagram of the MVP login:

<figure>
  <img src="/assets/MVPLogin_injection.png" alt="Login Injection" width="700">
</figure>

The lifecycle of our components:
<figure>
  <img src="/assets/Component_lifecycle.png" alt="Login Injection" width="500">
</figure>

As you can see the AuthComponent gets added to the AppComponent after the validation of the credentials.

We will now focus on the AuthComponent.
The AuthComponent uses the AuthModule. And allows two components to be added to this component: 
<ul>
<li>The GreetComponent</li>
<li>The ViewUserComponent</li>
</ul>

<script src="https://gist.github.com/Geertdepont/b5216a57b6975424936c21f1a3f639df.js"></script>

The AuthModule provides whatever the AuthComponent needs. In this case the AuthComponent only needs to provide the credentials.
So a provideCredentials method is added.

<script src="https://gist.github.com/Geertdepont/533cae68ef7bbfc49a45cde4b8cd30d6.js"></script>

When the validation of the login has succeeded, the AuthComponent gets added to the AppComponent.
Also the credentials from the AuthComponent are being set with the given username.

<script src="https://gist.github.com/Geertdepont/b1509c2930f9f4a6d472329fd8aefffa.js"></script>

After this the GreetComponent gets added to the AuthComponent in the GreetActivity with the <b>setupComponent</b> method. 
And the GreetActivity is injected into the GreetComponent. 
Now everything the GreetActivity needs is taken care of in the greetModule.

<script src="https://gist.github.com/Geertdepont/304f78a0318d31cb565566e7c0adbcb2.js"></script>

Now the only job of the GreetPresenter is to greet the user with it's username, by calling the <b>mGreetView.showMessage(mCredentials.getPersonalizedGreeting()) </b>
method. We do not have to check if the username is set, because Dagger has provided the credentials.

<script src="https://gist.github.com/Geertdepont/7e57da2825201c7246ad8599e9fb9abd.js"></script>

Without Dagger, each component has to specify all its dependencies. 
And multiple null-checks have to be made before using that dependency..

Check out the [Github page][github-page]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin

