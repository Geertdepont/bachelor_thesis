---
layout: post
title: "Use exclusively interfaces to let app modules communicate. This protects the architectural structure and helps defining a clear responsibility of modules."
guideline_id: 9
short_description: "Use interfaces"
date:   2019-05-21 01:00:33 +0200
icon: "icon-copy"
categories: generic
doc: "Using interfaces for linking modules, is a great way for module communication. 
      This way modules can’t access methods that are not declared in the interface and helps define a clear overview of what each module does. "

---
<h3>Description</h3>
Using interfaces for linking modules, is a great way for module communication. 
This way modules can’t access methods that are not declared in the interface. 
And helps define a clear overview of what each module does. 
Using interfaces for linking modules, is a great way for module communication. 
This way modules can’t access methods that are not declared in the interface. 
And helps define a clear overview of what each module does. 

<h3>Example</h3>
We created a simple [application][github-page]{:target="_blank"} which retrieves employees from this url: http://dummy.restapiexample.com/api/v1/

If we take a look at the Presenter and Repository modules, we see they communicate 
exclusively via interfaces. 
The MainPresenter implements the <b> OnViewEmployeesFinishedListener </b>.
Which contains the methods: 

<ul>
<li><b>onError </b> Which will be called when an error occurs in the Repository</li>
<li><b>onSuccess </b> Which will be called when the Repository successfully retrieves the employees</li>
</ul>              
                    
<script src="https://gist.github.com/Geertdepont/e8e9996406425a39462b5f03ec0896ff.js"></script>

The MainPresenter calls the <b>employeeRepository.getList(this)</b> giving itself as parameter.
The Repository communicates back by calling the methods of the
OnViewEmployeesFinishedListener interface.
OnError() is called if there does not exists a cache and the service does not work.
OnSuccess() is called if the data is successfully retrieved from cache, or is newly retrieved from the network.


<script src="https://gist.github.com/Geertdepont/6ecccdffb113b1b2e581775384f4bc6c.js"></script>

Check out the [Github page][github-page]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/Bossapplication" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>


This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>93</td>
      <td>Expose as little as possible from each module. Don't be tempted to create just that one shortcut that exposes an internal implementation detail from one module. You might gain a bit of time in the short term, but you then incur technical debt many times over as your codebase evolves.</td>
      <td><a href="https://developer.android.com/jetpack/docs/guide" target="_blank">https://developer.android.com/jetpack/docs/guide</a></td>
    </tr>      
     <tr>
      <td>147</td>
      <td>I started to use interfaces for linking the modules together. That way, they can’t access methods other than the ones declared on the interface. This protects the structure and helps defining a clear responsibility for each module, avoiding developer mistakes like putting the logic in the wrong place.</td>
      <td><a href="https://cheesecakelabs.com/blog/using-viper-architecture-android/" target="_blank">https://cheesecakelabs.com/blog/using-viper-architecture-android/</a></td>
    </tr>        
    <tr>
      <td>142</td>
      <td>Components have explicitly defined inputs. A component takes all its inputs via the constructor. Specifying, the necessary inputs in the constructor ensures some compile time safety by guaranteeing that we have all values available before creating the Component. Another advantage of explicit inputs is that during testing we can mock these dependencies easily and test the component in isolation.</td>
      <td><a href="https://blog.gojekengineering.com/an-architectural-overview-of-the-new-go-jek-rider-app-bb1dbd174323" target="_blank">https://blog.gojekengineering.com/an-architectural-overview-of-the-new-go-jek-rider-app-bb1dbd174323</a></td>
    </tr>     
 
    
</table>

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/Bossapplication