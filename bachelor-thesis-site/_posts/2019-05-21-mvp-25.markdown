---
layout: post
title: "Inject dependencies to Presenters into the Views when instantiating the Presenters, as this reduces coupling issues and null checks."
guideline_id: 25
short_description: "Inject dependencies to Presenters into the Views"
date:   2019-05-21 01:00:17 +0200
categories: mvp
doc: "Injecting presenters using Dagger reduces null checks and setPresenter() methods. 
      Whenever an activity is used, Dagger couples the view with the Presenter.
       Which ultimately results into clearer code."

---
<h3>Why?</h3>
Injecting presenters using Dagger reduces null checks and setPresenter() methods. 
Whenever an activity is used, Dagger couples the view with the Presenter.
 Which ultimately results into clearer code.



<h3>Example</h3>
We created a simple [MVP login Application][github-page]{:target="_blank"}.

The ViewUserModule provides the ViewUserComponent with the ViewUserPresenter.

<script src="https://gist.github.com/Geertdepont/bb5770a60eff27f2da993c3f46a140d0.js"></script>

This ViewUserPresenter gets initialized with the viewUsersView. Which is added when the 
module is instantiated.

<script src="https://gist.github.com/Geertdepont/6bfd1948147766a44579173049aaa979.js"></script>

Which happens in the viewUsersActivity.	So whenever a new Presenter is created, the Presenter always has a relationship with a view. So this is never null.

Check out the [Github page][github-page]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>267</td>
      <td>[MVP] Presenter: In the implementation of the constructor, the Presenter will call the setPresenter method of the View. This can be simplified when using a dependency injection framework that allows the injection of the Presenters in the corresponding views, reducing the coupling of the classes.</td>
     <td><a href="https://medium.com/upday-devs/android-architecture-patterns-part-3-model-view-viewmodel-e7eeee76b73b" target="_blank">https://medium.com/upday-devs/android-architecture-patterns-part-3-model-view-viewmodel-e7eeee76b73b</a></td>
    </tr> 
    <tr>
      <td>131</td>
      <td>Introducing a method in presenter which accepts the view reference requires null checks at many places, so avoid it if you can and instead use constructor.</td>
     <td><a href="https://www.pluralsight.com/guides/mvp-with-testing-part-1" target="_blank">https://www.pluralsight.com/guides/mvp-with-testing-part-1</a></td>
    </tr> 
     
</table>

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin