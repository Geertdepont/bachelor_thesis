---
layout: post
title: "Locally cache data for supporting offline-first experience."
guideline_id: 8
short_description: "Cache data"
date:   2019-05-21 01:00:34 +0200
categories: Generic
---
<h3>Why?</h3>
Using a cache to store data, enhances the userâ€™s experience. Activities are destroyed 
constantly. Retrieving data from the server whenever an activity is destroyed, 
is a waste of mobile data and a bad user experience. 
A synchronization of a local database and the webservice can solve this problem. 
Whenever the local database is empty, or the data is not valid, retrieve data from the web server.

<h3>Example</h3>
We created a simple [application][github-page] which retrieves employees from this url: http://dummy.restapiexample.com/api/v1/

If the employees were already retrieved within 5000 milliseconds, the repository returns the 
cache instead of making a new API request.	

<figure>
  <img src="/assets/BossApplication_lifecycle.png" alt="Rxjava packages" width="600">
</figure>

In the mainActivity when the button is clicked, the function showEmployees is called from the 
MainPresenter. 

<script src="https://gist.github.com/Geertdepont/64ab029fdf46c051eae227887eec24cf.js"></script>

The MainPresenter then asks the repository to show the users with the getList(this) function, 
which it will listen to with using the onSuccess or onError function. 

<script src="https://gist.github.com/Geertdepont/e8e9996406425a39462b5f03ec0896ff.js"></script>

The repository contains a EmployeeService and a EmployeeCache. 
The EmployeeService makes API requests and in the EmployeeCache the Employee is saved from the last request.

<script src="https://gist.github.com/Geertdepont/6ecccdffb113b1b2e581775384f4bc6c.js"></script>

When the getList() function from the Repository is called.
It checks if the cache is still valid. That is if the data was recently updated and not null.

<script src="https://gist.github.com/Geertdepont/e484aa2688cac63a9284cc156da2a000.js"></script>

If not, then a new listener is created which talks to the <b>MainPresenter</b> which in the getList() function has the name <b>callback</b>. 
Whenever the new the service request has an error the onError method from the listener is called, and in return calls the onError method from the MainPresenter.
Whenever the new the service request is successful the onSuccess method from the listener is called, and in return calls the onSuccess method from the MainPresenter.
Using a cache results in a faster response.
	
When using online services, do not forget to add the <uses-permission> in the 
AndroidManifest.xml

Check out the [Github page][github-page] to view the complete repository.

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/Bossapplication