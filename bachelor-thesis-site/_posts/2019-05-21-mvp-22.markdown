---
layout: post
title: "Make Presenters dependent on Views, and not Activities."
guideline_id: 22
short_description: "Make Presenters dependent on Views"
date:   2019-05-21 01:00:20 +0200
categories: mvp
icon: "icon-resize-horizontal"
doc: "Not only does this abstract away from the Android framework. 
      But also improves the testability of the Presenters. 
      Make the Activities implement a view interface. 
      This also prevents the Presenter to access methods which should not be accessible from the Activity. "
---
<h3>Why?</h3>
Not only does this abstract away from the Android framework. 
But also improves the testability of the Presenters. 
Make the Activities implement a view interface. 
This also prevents the Presenter to access methods which should not be accessible from the Activity. 

<h3>Example</h3>
We created a simple [MVP login Application][github-page]{:target="_blank"}.

As described above the presenter is dependent on views and not the activity.

<script src="https://gist.github.com/Geertdepont/7e57da2825201c7246ad8599e9fb9abd.js"></script>

The GreetPresenter has only a reference to a GreetView.
The GreetActivity implements the GreetView.

<script src="https://gist.github.com/Geertdepont/a75d3679705df490bdae794dfcc1bbee.js"></script>

The GreetPresenter makes changes to the Activity via the view.
To show the message, <b>mGreetView.showMessage(mCredentials.getPersonalizedGreeting());</b> is being called.

Which in the mainActivity is described as:
<script src="https://gist.github.com/Geertdepont/da05a619efc529decd2db3c7c0298d3f.js"></script>

The message has been added to the TextView <b>personalGreetingTextView</b>.

Check out the [Github page][github-page]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>125</td>
      <td>The Presenter depends on the View interface and not directly on the Activity: in this way, we succeed in decoupling the presenter from the view implementation respecting the D of the SOLID principles. We can replace the concrete view without changing a line of code of the presenter. Furthermore, we can easily unittest presenter by creating a mock view.</td>
     <td><a href="https://dev.to/wahibhaq/a-brief-summary-of-thoughts-on-clean-architecture-and-mvp-48h9" target="_blank">https://dev.to/wahibhaq/a-brief-summary-of-thoughts-on-clean-architecture-and-mvp-48h9</a></td>
    </tr>   
    <tr>
      <td>179</td>
      <td>The View contract: Like I said before, the view is implemented by an Activity (or a Fragment). The presenter must depend on the View interface and not directly on the Activity.</td>
     <td><a href="https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf" target="_blank">https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf</a></td>
    </tr>   
</table>

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin