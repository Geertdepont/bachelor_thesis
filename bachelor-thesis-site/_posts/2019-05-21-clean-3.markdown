---
layout: post
title:  "The framework and devices layer should include the entirety of the app components which depend on Android."
guideline_id: 3
short_description: "Framework and devices layer"
date:   2019-05-21 01:00:02 +0200
categories: clean
icon: "icon-desktop"
doc: "All components related to the framework should be grouped
      in the outer architectural layer. All components which contain Android specific implementations should
      not be present in the business logic layers."
---
<h3>Description</h3>
In accordance to the clean architecture principles,
all components related to the framework should be grouped
in the outer architectural layer. This includes all components
which contain Android specific implementations, which should
not be present in the business logic layers. Examples include,
in addition to the user interface model, the data persistence
module (e.g., LiveData, DAOs, ORMs, Shared Preferences,
Retrofit, etc.) and eventual dependency injection frameworks.

<h3>Example</h3>
We created a simple [MVP login Application][github-page]{:target="_blank"}. 

<figure>
  <img src="/assets/MVPLogin_depicted.png" alt="MVP depicted" width="90%">
</figure>

As you can see all the activities are in the View Layer. 
This device layer contains everything related to the Android Framework.

These are also the only files that contain <b>onCreate</b> from the Android Framework.
Because this method is called whenever an Activity is created.

<script src="https://gist.github.com/Geertdepont/9430f84a89fb5f16ba2503bd23eceddd.js"></script>

Check out the [Github page][github-page]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

[github-page]: https://github.com/Geertdepont/bachelor_thesis/tree/master/MVPLogin

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
 <tr>
    <td>222</td>
    <td> This [presentation layer] is the last layer, responsible for building the objects the views are going to consume and processing the actions performed in this views. This is also the layer where the Android Architecture Components are used, more specifically, the LiveData and the ViewModel.</td>
    <td><a href=" https://medium.com/insiden26/reactive-clean-architecture-with-android-architecture-components-685a6682e0ca" target="_blank"> https://medium.com/insiden26/reactive-clean-architecture-with-android-architecture-components-685a6682e0ca</a></td>
 </tr>

 <tr>
    <td>249</td>
    <td> On clean ark The data module should hold everything related to data persistence and manipulation. Here we will find DAOs, ORMs, SharedPreferences, network related stuff like Retrofit services and similar.</td>
    <td><a href=" https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/" target="_blank"> https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/</a></td>
 </tr>

 <tr>
    <td>245</td>
    <td> On clean code ark The device module should have everything related to Android that’s not data persistence and UI. The data module should hold everything related to data persistence, as we’ve already said. You cannot make those two into Java modules because they need access to various Android stuff. You can make them into Android library. Data and Device modules contain all of the implementation details that business logic does not care about. It only cares about the contracts, allowing you to easily test it and swap out implementations without touching the business logic. [...] Each data source, both network, and local storage, will have its own models to work with.</td>
    <td><a href=" https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/" target="_blank"> https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/</a></td>
 </tr>

 <tr>
    <td>250</td>
    <td> On clean ark The device module should have everything related to Android that’s not data persistence and UI. In example, wrapper classes for ConnectivityManager, NotificationManager and misc sensors. We will make both Data and Device modules android modules, as they must know about Android and cannot be pure java.</td>
    <td><a href=" https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/" target="_blank"> https://five.agency/android-architecture-part-1-every-new-beginning-is-hard/</a></td>
 </tr>
