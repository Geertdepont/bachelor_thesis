---
layout: post
title: "Clearly define contracts between Views and Presenters."
guideline_id: 19
short_description: "Clearly define contracts between Views and Presenters."
date:   2019-05-21 01:00:23 +0200
categories: mvp
doc: "Writing a contract documenting the communication between the View and the
      Presenter makes the source code of apps become more understandable, as the relation between
      the View and the Presenter is explicitly documented."

---
<h3>Why?</h3>
Before starting to develop a new app feature,
a good architectural practice consists in writing a contract
documenting the communication between the View and the
Presenter. The contract should document for each event in
the View which is the corresponding action in the Presenter.
By implementing contract interface classes, the source code
of apps become more understandable, as the relation between
the View and the Presenter is explicitly documented.

<h3>Example</h3>
For this example we will look at the [Book example][Book-example]{:target="_blank"}.

Our BookListContract:
<script src="https://gist.github.com/Geertdepont/303ada3a2b720dea0bf534313bf4a845.js"></script>

Our BookListPresenter implements the Presenter interface and our BookListActivity 
implements the View interface.
This contract helps to design how the communication between our BookListActivity and our 
BookListPresenter will be.

The Presenter will look the books, and the View will present the books.

At a certain moment our BookListActivity will request the Presenter to loadBookList();

<script src="https://gist.github.com/Geertdepont/47b39d34691a8d07a7c3e73db46b5681.js"></script>

This Presenter will then ask the client by calling the getBookList with its callback object as parameter.

<script src="https://gist.github.com/Geertdepont/b02b82c58ae3a1e63e84f634e9ca88c7.js"></script>

If the request is succesfull, the callback will call the showBookList() with the List<Book> as its 
parameter. If not, it will show the error message.

<figure>
  <img src="/assets/BookApplication_eventDiagram.png" alt="Login Injection" width="85%">
</figure>

The Contract describes the interaction between the view and the presenter. 
The Presenter has to perform two methods:
<ul>
<li><b>loadBookList</b> to get the books for the view</li>
<li><b>dropView</b> to release its connection with the view</li>
</ul> 

The View has to perform four methods:
<ul>
<li><b>showProgress</b> to add progressbar, to show that the books are being retrieved.</li>
<li><b>hideProgress</b> to remove the progressbar, if successful or unsuccesful. </li>
<li><b>showBookList</b> to show the retrieved books</li>
<li><b>showLoadingError</b> to show if the retrieval was unsuccesful.</li>
</ul> 

I hope that creating this contract makes the interaction more understandable.

Check out the [Github page][Book-example]{:target="_blank"} to view the complete repository.

<a href="https://github.com/Geertdepont/bachelor_thesis/tree/master/BookApplication" target="_blank"><button type="button" class="btn btn-primary btn-icon-right">Go to the github page</button></a>

This guideline was extracted from:
<table id="guidelinelinks">
  <tr>
    <th>Id</th>
    <th>Guideline</th>
    <th>URL</th>
  </tr>
    <tr>
      <td>178</td>
      <td>When you are going to write a new feature, it is a good practice to write a contract at first step. The contract describes the communication between view and presenter, it helps you to design in a cleaner way the interaction.</td>
     <td><a href="https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf" target="_blank">https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf</a></td>
    </tr> 
    <tr>
      <td>180</td>
      <td>During the “contract design” phase, you must decide for each user event, what is the corresponding action and who the logic should belong to.</td>
     <td><a href="https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf" target="_blank">https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf</a></td>
    </tr> 
    <tr>
      <td>268</td>
      <td>[MVP] The ModelViewPresenter pattern brings with it a very good separation of concerns. While this is for sure a pro, when developing a small app or a prototype, this can seem like an overhead. To decrease the number of interfaces used, some developers remove the Contract interface class, and the interface for the Presenter.</td>
     <td><a href="https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf" target="_blank">https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf</a></td>
    </tr> 
   

</table>

[Book-example]: https://github.com/Geertdepont/bachelor_thesis/tree/master/BookApplication